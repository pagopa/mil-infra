<policies>
    <inbound>
        <base />

        <!-- Input validation -->
        <validate-parameters specified-parameter-action="prevent" unspecified-parameter-action="prevent" errors-variable-name="requestParametersValidation">
            <headers specified-parameter-action="prevent" unspecified-parameter-action="ignore">
                <parameter name="RequestId" action="prevent"/>
            </headers>
            <path specified-parameter-action="prevent">
                <parameter name="acquirerId" action="prevent"/>
            </path>
        </validate-parameters>
        
        <!-- Input validated successfully -->
        <set-variable name="acquirerId" value="@( context.Request.MatchedParameters["acquirerId"] )" />
        
        <!-- Look for the configuration in the cache -->
        <cache-lookup-value key="@( (string)context.Variables["acquirerId"] )" variable-name="conf" caching-type="internal" />
        <choose>
            <when condition="@( !context.Variables.ContainsKey("conf") )">
                <!-- Cache miss -->
                <!-- Look for the configuration in the storage account -->
                <send-request mode="new" response-variable-name="storageAccountResponse" timeout="5" ignore-error="true">
                    <set-url>@( new Uri(new Uri("${storage_container_uri}"), (string)context.Variables["acquirerId"] + ".json").AbsoluteUri )</set-url>
                    <set-method>GET</set-method>
                    <!-- <authentication-managed-identity resource="https://storage.azure.com/" /> -->
                </send-request>
                <choose>
                    <when condition="@( ((IResponse)context.Variables["storageAccountResponse"]).StatusCode == 200 )">
                        <!-- Configuration found in the storage account -->
                        <set-variable name="conf" value="@( ((IResponse)context.Variables["storageAccountResponse"]).Body.As<string>() )" />

                        <!-- Store it in the cache -->
                        <cache-store-value key="@( context.Request.MatchedParameters["acquirerId"] )" value="@( (string)context.Variables["conf"] )" duration="3600" caching-type="internal" />
                    </when>
                </choose>
            </when>
        </choose>
    </inbound>
    <backend>
        <!-- There isn't any back-end -->
    </backend>
    <outbound>
        <base />
        <choose>
            <when condition="@( context.Variables.ContainsKey("conf") )">
                <!-- Configuration found -->
                <return-response>
                    <set-status code="200" reason="Found" />
                    <set-header name="Content-Type" exists-action="override">
                        <value>application/json</value>
                    </set-header>
                    <set-body>@( (string)context.Variables["conf"] )</set-body>
                </return-response>
            </when>

            <otherwise>
                <!-- Configuration not found -->
                <return-response>
                    <set-status code="404" reason="Not Found" />
                    <set-body />
                </return-response>
            </otherwise>
        </choose>
    </outbound>
    <on-error>
        <base />
    </on-error>
</policies>